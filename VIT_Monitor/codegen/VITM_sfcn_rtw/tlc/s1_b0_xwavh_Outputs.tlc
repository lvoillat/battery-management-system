%implements s1_b0_xwavh_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T minV;
real_T maxV;
real_T minV_0;
real_T maxV_0;
real_T rtb_Add1;
real_T rtb_Add1_p;
real_T rtb_Add1_h[40];
real_T rtb_Add;
real_T rtb_Switch6;
real_T rtb_Divide;
real_T rtb_Divide_m;
int32_T i;
B_VITM_T *_rtB;
PrevZCX_VITM_T *_rtZCE;
%closefile localVarDecl
%<SLibCG_TrackZCEvent(1)>\
_rtZCE = %<(SLibCG_SE(SLibGetPreviousZCStructPtr()))>;
%<SLibCG_TrackBlockIO(1)>\
_rtB = %<(SLibCG_SE(SLibGetBlockIOStructPtr()))>;
%<SLibCG_TrackEO(22)>\
%<SLibCG_TrackEO(21)>\
%<SLibCG_TrackEO(20)>\
%<SLibCG_TrackEO(19)>\
%<SLibCG_TrackEO(18)>\
%<SLibCG_TrackEO(17)>\
%<SLibCG_TrackEO(16)>\
%<SLibCG_TrackEO(15)>\
%<SLibCG_TrackEO(14)>\
%<SLibCG_TrackEO(13)>\
%<SLibCG_TrackEO(12)>\
%<SLibCG_TrackEO(11)>\
%<SLibCG_TrackEO(10)>\
%<SLibCG_TrackEO(9)>\
%<SLibCG_TrackEO(8)>\
%<SLibCG_TrackEO(7)>\
%<SLibCG_TrackEO(6)>\
%<SLibCG_TrackEO(5)>\
%<SLibCG_TrackEO(4)>\
%<SLibCG_TrackEO(3)>\
%<SLibCG_TrackEO(2)>\
%<SLibCG_TrackEO(1)>\
%<SLibCG_TrackEO(0)>\
%<SLibCG_TrackEI(7)>\
%<SLibCG_TrackEI(6)>\
%<SLibCG_TrackEI(5)>\
%<SLibCG_TrackEI(4)>\
%<SLibCG_TrackEI(3)>\
%<SLibCG_TrackEI(2)>\
%<SLibCG_TrackEI(1)>\
%<SLibCG_TrackEI(0)>\
/* Outputs for Atomic SubSystem: '<Root>/VITM' */
/* Sum: '<S11>/Add1' incorporates:
 *  Delay: '<S11>/Delay1'
 *  Gain: '<S11>/Gain'
 *  Inport: '<Root>/CoolantInletT'
 */
rtb_Add1 = %<(SLibCG_SE(SLibCGIR_PV(19, 0, 1, 1, "", -1, "", 0)))> * *((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 4))[0] + %<(SLibCG_SE(SLibCG_DWV(0, 0, 1, 1, "", -1, "", 0)))>;
/* Delay: '<S7>/Resettable Delay3' incorporates:
 *  Constant: '<S7>/Constant22'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay3_Reset_ZCE", "%<(SLibCGIR_PV(13, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(1, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S7>/Add3' incorporates:
 *  Constant: '<S7>/Constant2'
 *  Constant: '<S7>/Constant3'
 *  Delay: '<S7>/Resettable Delay3'
 *  Logic: '<S7>/Logical Operator'
 *  RelationalOperator: '<S7>/Relational Operator1'
 *  RelationalOperator: '<S7>/Relational Operator2'
 */
_rtB->Add3 = (real_T)((rtb_Add1 >= %<(SLibCG_SE(SLibCGIR_PV(15, 0, 1, 1, "", -1, "", 0)))>) || (rtb_Add1 <= %<(SLibCG_SE(SLibCGIR_PV(14, 0, 1, 1, "", -1, "", 0)))>)) + %<(SLibCG_SE(SLibCG_DWV(1, 0, 1, 1, "", -1, "", 0)))>;
/* Sum: '<S12>/Add1' incorporates:
 *  Delay: '<S12>/Delay1'
 *  Gain: '<S12>/Gain'
 *  Inport: '<Root>/CoolantOutletT'
 */
rtb_Add1_p = %<(SLibCG_SE(SLibCGIR_PV(19, 0, 1, 1, "", -1, "", 0)))> * *((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 5))[0] + %<(SLibCG_SE(SLibCG_DWV(2, 0, 1, 1, "", -1, "", 0)))>;
/* Delay: '<S8>/Resettable Delay3' incorporates:
 *  Constant: '<S8>/Constant22'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay3_Reset_ZCE_g", "%<(SLibCGIR_PV(16, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(3, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S8>/Add3' incorporates:
 *  Constant: '<S8>/Constant2'
 *  Constant: '<S8>/Constant3'
 *  Delay: '<S8>/Resettable Delay3'
 *  Logic: '<S8>/Logical Operator'
 *  RelationalOperator: '<S8>/Relational Operator1'
 *  RelationalOperator: '<S8>/Relational Operator2'
 */
_rtB->Add3_c = (real_T)((rtb_Add1_p >= %<(SLibCG_SE(SLibCGIR_PV(18, 0, 1, 1, "", -1, "", 0)))>) || (rtb_Add1_p <= %<(SLibCG_SE(SLibCGIR_PV(17, 0, 1, 1, "", -1, "", 0)))>)) + %<(SLibCG_SE(SLibCG_DWV(3, 0, 1, 1, "", -1, "", 0)))>;
/* Gain: '<S11>/Gain1' */
_rtB->Gain1 = (1.0 - %<(SLibCG_SE(SLibCGIR_PV(19, 0, 1, 1, "", -1, "", 0)))>) * rtb_Add1;
/* Gain: '<S12>/Gain3' */
_rtB->Gain3 = (1.0 - %<(SLibCG_SE(SLibCGIR_PV(19, 0, 1, 1, "", -1, "", 0)))>) * rtb_Add1_p;
/* Sum: '<S10>/Add1' incorporates:
 *  Delay: '<S10>/Delay1'
 *  Gain: '<S10>/Gain2'
 *  Inport: '<Root>/CellsTemperature'
 */
for (i = 0; i < 40; i++) {
    rtb_Add1_h[i] = %<(SLibCG_SE(SLibCGIR_PV(2, 0, 1, 1, "", -1, "", 0)))> * *((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 6))[i] + %<(SLibCG_SE(SLibCG_DWV(4, 0, 1, 40, "", -1, "i", 0)))>;
}
/* End of Sum: '<S10>/Add1' */

/* MinMax: '<S5>/MinMax' */
minV = rtb_Add1_h[0];
for (i = 0; i < 39; i++) {
    if (!((minV <= rtb_Add1_h[i + 1]) || rtIsNaN(rtb_Add1_h[i + 1]))) {
        minV = rtb_Add1_h[i + 1];
    }
}
/* Delay: '<S5>/Resettable Delay' incorporates:
 *  Constant: '<S5>/Constant4'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay_Reset_ZCE", "%<(SLibCGIR_PV(4, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(5, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S5>/Add' incorporates:
 *  Constant: '<S5>/Constant'
 *  Delay: '<S5>/Resettable Delay'
 *  MinMax: '<S5>/MinMax'
 *  RelationalOperator: '<S5>/Relational Operator'
 */
_rtB->Add = (real_T)(minV <= %<(SLibCG_SE(SLibCGIR_PV(6, 0, 1, 1, "", -1, "", 0)))>) + %<(SLibCG_SE(SLibCG_DWV(5, 0, 1, 1, "", -1, "", 0)))>;
/* MinMax: '<S5>/MinMax1' */
maxV = rtb_Add1_h[0];
for (i = 0; i < 39; i++) {
    if (!((maxV >= rtb_Add1_h[i + 1]) || rtIsNaN(rtb_Add1_h[i + 1]))) {
        maxV = rtb_Add1_h[i + 1];
    }
}
/* Delay: '<S5>/Resettable Delay1' incorporates:
 *  Constant: '<S5>/Constant10'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay1_Reset_ZCE", "%<(SLibCGIR_PV(3, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(6, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S5>/Add1' incorporates:
 *  Constant: '<S5>/Constant1'
 *  Delay: '<S5>/Resettable Delay1'
 *  MinMax: '<S5>/MinMax1'
 *  RelationalOperator: '<S5>/Relational Operator1'
 */
_rtB->Add1 = (real_T)(maxV >= %<(SLibCG_SE(SLibCGIR_PV(5, 0, 1, 1, "", -1, "", 0)))>) + %<(SLibCG_SE(SLibCG_DWV(6, 0, 1, 1, "", -1, "", 0)))>;
/* Sum: '<S5>/Sum of Elements' */
rtb_Switch6 = rtb_Add1_h[0];
for (i = 0; i < 39; i++) {
    rtb_Switch6 += rtb_Add1_h[i + 1];
}
/* End of Sum: '<S5>/Sum of Elements' */

/* Product: '<S5>/Divide' incorporates:
 *  Constant: '<S5>/Constant14'
 */
rtb_Divide = rtb_Switch6 / %<(SLibCG_SE(SLibCGIR_PV(32, 0, 1, 1, "", -1, "", 0)))>;
/* MinMax: '<S5>/MinMax2' */
minV = rtb_Add1_h[0];
/* MinMax: '<S5>/MinMax3' */
maxV = rtb_Add1_h[0];
for (i = 0; i < 39; i++) {
    /* MinMax: '<S5>/MinMax2' */
    if (!((minV <= rtb_Add1_h[i + 1]) || rtIsNaN(rtb_Add1_h[i + 1]))) {
        minV = rtb_Add1_h[i + 1];
    }
    /* MinMax: '<S5>/MinMax3' */
    if (!((maxV >= rtb_Add1_h[i + 1]) || rtIsNaN(rtb_Add1_h[i + 1]))) {
        maxV = rtb_Add1_h[i + 1];
    }
}
for (i = 0; i < 40; i++) {
    /* Gain: '<S10>/Gain3' */
    _rtB->Gain3_n[i] = (1.0 - %<(SLibCG_SE(SLibCGIR_PV(2, 0, 1, 1, "", -1, "", 0)))>) * rtb_Add1_h[i];
    /* Sum: '<S2>/Add' incorporates:
 *  Delay: '<S2>/Delay'
 *  Gain: '<S2>/Gain'
 *  Inport: '<Root>/CellVoltages'
 */
    _rtB->Add_n[i] = %<(SLibCG_SE(SLibCGIR_PV(7, 0, 1, 1, "", -1, "", 0)))> * *((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 0))[i] + %<(SLibCG_SE(SLibCG_DWV(7, 0, 1, 40, "", -1, "i", 0)))>;
    /* Gain: '<S2>/Gain1' */
    _rtB->Gain1_b[i] = (1.0 - %<(SLibCG_SE(SLibCGIR_PV(7, 0, 1, 1, "", -1, "", 0)))>) * _rtB->Add_n[i];
}
/* Sum: '<S3>/Add' incorporates:
 *  Delay: '<S3>/Delay'
 *  Gain: '<S3>/Gain'
 *  Inport: '<Root>/PackVoltage'
 */
_rtB->Add_f = %<(SLibCG_SE(SLibCGIR_PV(27, 0, 1, 1, "", -1, "", 0)))> * *((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 1))[0] + %<(SLibCG_SE(SLibCG_DWV(8, 0, 1, 1, "", -1, "", 0)))>;
/* Gain: '<S3>/Gain1' */
_rtB->Gain1_d = (1.0 - %<(SLibCG_SE(SLibCGIR_PV(27, 0, 1, 1, "", -1, "", 0)))>) * _rtB->Add_f;
/* MinMax: '<S6>/MinMax' */
minV_0 = _rtB->Add_n[0];
for (i = 0; i < 39; i++) {
    if (!((minV_0 <= _rtB->Add_n[i + 1]) || rtIsNaN(_rtB->Add_n[i + 1]))) {
        minV_0 = _rtB->Add_n[i + 1];
    }
}
/* Delay: '<S6>/Resettable Delay' incorporates:
 *  Constant: '<S6>/Constant4'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay_Reset_ZCE_a", "%<(SLibCGIR_PV(10, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(9, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S6>/Add' incorporates:
 *  Constant: '<S6>/Constant'
 *  Delay: '<S6>/Resettable Delay'
 *  MinMax: '<S6>/MinMax'
 *  RelationalOperator: '<S6>/Relational Operator'
 */
_rtB->Add_o = (real_T)(minV_0 <= %<(SLibCG_SE(SLibCGIR_PV(12, 0, 1, 1, "", -1, "", 0)))>) + %<(SLibCG_SE(SLibCG_DWV(9, 0, 1, 1, "", -1, "", 0)))>;
/* MinMax: '<S6>/MinMax1' */
maxV_0 = _rtB->Add_n[0];
for (i = 0; i < 39; i++) {
    if (!((maxV_0 >= _rtB->Add_n[i + 1]) || rtIsNaN(_rtB->Add_n[i + 1]))) {
        maxV_0 = _rtB->Add_n[i + 1];
    }
}
/* Delay: '<S6>/Resettable Delay1' incorporates:
 *  Constant: '<S6>/Constant10'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay1_Reset_ZCE_n", "%<(SLibCGIR_PV(9, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(10, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S6>/Add1' incorporates:
 *  Constant: '<S6>/Constant1'
 *  Delay: '<S6>/Resettable Delay1'
 *  MinMax: '<S6>/MinMax1'
 *  RelationalOperator: '<S6>/Relational Operator1'
 */
_rtB->Add1_i = (real_T)(maxV_0 >= %<(SLibCG_SE(SLibCGIR_PV(11, 0, 1, 1, "", -1, "", 0)))>) + %<(SLibCG_SE(SLibCG_DWV(10, 0, 1, 1, "", -1, "", 0)))>;
/* Sum: '<S6>/Sum of Elements' */
rtb_Switch6 = _rtB->Add_n[0];
for (i = 0; i < 39; i++) {
    rtb_Switch6 += _rtB->Add_n[i + 1];
}
/* End of Sum: '<S6>/Sum of Elements' */

/* Product: '<S6>/Divide' incorporates:
 *  Constant: '<S6>/Constant15'
 */
rtb_Divide_m = rtb_Switch6 / %<(SLibCG_SE(SLibCGIR_PV(31, 0, 1, 1, "", -1, "", 0)))>;
/* MinMax: '<S6>/MinMax2' */
minV_0 = _rtB->Add_n[0];
/* MinMax: '<S6>/MinMax3' */
maxV_0 = _rtB->Add_n[0];
/* Sum: '<S15>/Sum of Elements' incorporates:
 *  Delay: '<S15>/Delay1'
 */
rtb_Switch6 = %<(SLibCG_SE(SLibCG_DWV(12, 0, 1, 40, "", -1, "", 0)))>;
for (i = 0; i < 39; i++) {
    /* MinMax: '<S6>/MinMax2' */
    if (!((minV_0 <= _rtB->Add_n[i + 1]) || rtIsNaN(_rtB->Add_n[i + 1]))) {
        minV_0 = _rtB->Add_n[i + 1];
    }
    /* MinMax: '<S6>/MinMax3' */
    if (!((maxV_0 >= _rtB->Add_n[i + 1]) || rtIsNaN(_rtB->Add_n[i + 1]))) {
        maxV_0 = _rtB->Add_n[i + 1];
    }
    /* Sum: '<S15>/Sum of Elements' incorporates:
 *  Delay: '<S15>/Delay1'
 */
    rtb_Switch6 += %<(SLibCG_SE(SLibCG_DWV(12, 0, 1, 40, "", -1, "i + 1", 0)))>;
}
/* Sum: '<S15>/Subtract' incorporates:
 *  Delay: '<S15>/Delay'
 */
rtb_Switch6 = %<(SLibCG_SE(SLibCG_DWV(11, 0, 1, 1, "", -1, "", 0)))> - rtb_Switch6;
/* Abs: '<S15>/Abs' */
rtb_Switch6 = fabs(rtb_Switch6);
/* Delay: '<S15>/Resettable Delay2' incorporates:
 *  Constant: '<S15>/Constant15'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay2_Reset_ZCE", "%<(SLibCGIR_PV(28, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(13, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S15>/Add2' incorporates:
 *  Constant: '<S15>/Constant14'
 *  Delay: '<S15>/Resettable Delay2'
 *  RelationalOperator: '<S15>/Relational Operator4'
 */
_rtB->Add2 = (real_T)(rtb_Switch6 >= %<(SLibCG_SE(SLibCGIR_PV(0, 0, 1, 1, "", -1, "", 0)))>) + %<(SLibCG_SE(SLibCG_DWV(13, 0, 1, 1, "", -1, "", 0)))>;
/* Sum: '<S9>/Add1' incorporates:
 *  Delay: '<S9>/Delay1'
 *  Gain: '<S9>/Gain2'
 *  Inport: '<Root>/PackCurrent'
 */
rtb_Switch6 = %<(SLibCG_SE(SLibCGIR_PV(23, 0, 1, 1, "", -1, "", 0)))> * *((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 3))[0] + %<(SLibCG_SE(SLibCG_DWV(14, 0, 1, 1, "", -1, "", 0)))>;
/* Gain: '<S9>/Gain3' */
_rtB->Gain3_nj = (1.0 - %<(SLibCG_SE(SLibCGIR_PV(23, 0, 1, 1, "", -1, "", 0)))>) * rtb_Switch6;
/* Delay: '<S14>/Resettable Delay3' incorporates:
 *  Constant: '<S14>/Constant22'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay3_Reset_ZCE_i", "%<(SLibCGIR_PV(24, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(15, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Switch: '<S14>/Switch6' incorporates:
 *  Abs: '<S14>/Abs'
 *  Constant: '<S14>/Constant21'
 *  Constant: '<S14>/Constant26'
 *  Constant: '<S14>/Constant27'
 *  RelationalOperator: '<S14>/Relational Operator6'
 */
if (fabs(rtb_Switch6) >= %<(SLibCG_SE(SLibCGIR_PV(26, 0, 1, 1, "", -1, "", 0)))>) {
    i = 1;
} else {
    i = 0;
}
/* End of Switch: '<S14>/Switch6' */

/* Sum: '<S14>/Add3' incorporates:
 *  Delay: '<S14>/Resettable Delay3'
 */
_rtB->Add3_m = (real_T)i + %<(SLibCG_SE(SLibCG_DWV(15, 0, 1, 1, "", -1, "", 0)))>;
/* Delay: '<S13>/Resettable Delay3' incorporates:
 *  Constant: '<S13>/Constant22'
 */
if (%<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "_rtZCE->ResettableDelay3_Reset_ZCE_f", "%<(SLibCGIR_PV(22, 0, 1, 1, "", -1, "", 0))>", 0)))> != NO_ZCEVENT) {
%<SLibCG_SetDWV(16, 0, 1, 1, "", -1, "", 0, "0.0")>\
}
/* Sum: '<S13>/Add3' incorporates:
 *  Constant: '<S13>/Constant'
 *  Delay: '<S13>/Resettable Delay3'
 *  Inport: '<Root>/HVILReturn'
 *  RelationalOperator: '<S13>/Relational Operator'
 */
_rtB->Add3_j = (real_T)(*((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 7))[0] < 1.0) + %<(SLibCG_SE(SLibCG_DWV(16, 0, 1, 1, "", -1, "", 0)))>;
/* Sum: '<S4>/Add' incorporates:
 *  Delay: '<S4>/Delay'
 *  Gain: '<S4>/Gain'
 *  Inport: '<Root>/VehSideVoltage'
 */
rtb_Add = %<(SLibCG_SE(SLibCGIR_PV(30, 0, 1, 1, "", -1, "", 0)))> * *((const real_T **)ssGetInputPortSignalPtrs(%<tSimStruct>, 2))[0] + %<(SLibCG_SE(SLibCG_DWV(17, 0, 1, 1, "", -1, "", 0)))>;
/* Gain: '<S4>/Gain1' */
_rtB->Gain1_l = (1.0 - %<(SLibCG_SE(SLibCGIR_PV(30, 0, 1, 1, "", -1, "", 0)))>) * rtb_Add;
/* Outport: '<Root>/vitm_CellsMaxTemperature' incorporates:
 *  MinMax: '<S5>/MinMax3'
 */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 0))[0] = maxV;
/* Outport: '<Root>/vitm_CellsMinTemperature' incorporates:
 *  MinMax: '<S5>/MinMax2'
 */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 1))[0] = minV;
/* Outport: '<Root>/vitm_CellsAvgTemperature' incorporates:
 *  Constant: '<S5>/Constant15'
 *  Product: '<S5>/Divide1'
 */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 2))[0] = rtb_Divide / %<(SLibCG_SE(SLibCGIR_PV(31, 0, 1, 1, "", -1, "", 0)))>;
/* Outport: '<Root>/vitm_CellsTemperatureLowFault' incorporates:
 *  Constant: '<S5>/Constant5'
 *  RelationalOperator: '<S5>/Relational Operator2'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 3))[0] = (uint8_T)(_rtB->Add >= %<(SLibCG_SE(SLibCGIR_PV(1, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* Outport: '<Root>/vitm_CellsTemperatureHighFault' incorporates:
 *  Constant: '<S5>/Constant11'
 *  RelationalOperator: '<S5>/Relational Operator3'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 4))[0] = (uint8_T)(_rtB->Add1 >= %<(SLibCG_SE(SLibCGIR_PV(1, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* Outport: '<Root>/vitm_CellsVoltageLowFault' incorporates:
 *  Constant: '<S6>/Constant5'
 *  RelationalOperator: '<S6>/Relational Operator2'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 5))[0] = (uint8_T)(_rtB->Add_o >= %<(SLibCG_SE(SLibCGIR_PV(8, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* Outport: '<Root>/vitm_CellsVoltageHighFault' incorporates:
 *  Constant: '<S6>/Constant11'
 *  RelationalOperator: '<S6>/Relational Operator3'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 6))[0] = (uint8_T)(_rtB->Add1_i >= %<(SLibCG_SE(SLibCGIR_PV(8, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* Outport: '<Root>/vitm_PackVoltageFault' incorporates:
 *  Constant: '<S15>/Constant16'
 *  RelationalOperator: '<S15>/Relational Operator5'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 7))[0] = (uint8_T)(_rtB->Add2 >= %<(SLibCG_SE(SLibCGIR_PV(29, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* Outport: '<Root>/vitm_CellsMinVoltage' incorporates:
 *  MinMax: '<S6>/MinMax2'
 */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 8))[0] = minV_0;
/* Outport: '<Root>/vitm_CellsMaxVoltage' incorporates:
 *  MinMax: '<S6>/MinMax3'
 */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 9))[0] = maxV_0;
/* Outport: '<Root>/vitm_CellsAvgVoltage' incorporates:
 *  Constant: '<S6>/Constant14'
 *  Product: '<S6>/Divide1'
 */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 10))[0] = rtb_Divide_m / %<(SLibCG_SE(SLibCGIR_PV(32, 0, 1, 1, "", -1, "", 0)))>;
/* End of Outputs for SubSystem: '<Root>/VITM' */

/* Outport: '<Root>/vitm_PackVoltageFiltered' */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 11))[0] = _rtB->Add_f;
/* Outport: '<Root>/vitm_PackCurrentFiltered' */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 12))[0] = rtb_Switch6;
/* Outputs for Atomic SubSystem: '<Root>/VITM' */
/* Outport: '<Root>/vitm_PackCurrentFault' incorporates:
 *  Constant: '<S14>/Constant23'
 *  RelationalOperator: '<S14>/Relational Operator7'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 13))[0] = (uint8_T)(_rtB->Add3_m >= %<(SLibCG_SE(SLibCGIR_PV(25, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* Outport: '<Root>/vitm_CoolantDeltaTemp' incorporates:
 *  Sum: '<S1>/Sum'
 */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 14))[0] = rtb_Add1 - rtb_Add1_p;
/* Outport: '<Root>/vitm_CoolantInletTempFault' incorporates:
 *  Constant: '<S7>/Constant23'
 *  RelationalOperator: '<S7>/Relational Operator7'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 15))[0] = (uint8_T)(_rtB->Add3 >= %<(SLibCG_SE(SLibCGIR_PV(20, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* Outport: '<Root>/vitm_CoolantOutlletTempFault' incorporates:
 *  Constant: '<S8>/Constant23'
 *  RelationalOperator: '<S8>/Relational Operator7'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 16))[0] = (uint8_T)(_rtB->Add3_c >= %<(SLibCG_SE(SLibCGIR_PV(20, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* End of Outputs for SubSystem: '<Root>/VITM' */

/* Outport: '<Root>/vitm_CoolantInletTFiltered' */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 17))[0] = rtb_Add1;
/* Outport: '<Root>/vitm_CoolantOutletTFiltered' */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 18))[0] = rtb_Add1_p;
/* Outputs for Atomic SubSystem: '<Root>/VITM' */
/* Outport: '<Root>/vitm_HVILFault' incorporates:
 *  Constant: '<S13>/Constant23'
 *  RelationalOperator: '<S13>/Relational Operator7'
 */
((uint8_T *)ssGetOutputPortSignal(%<tSimStruct>, 19))[0] = (uint8_T)(_rtB->Add3_j >= %<(SLibCG_SE(SLibCGIR_PV(21, 0, 1, 1, "", -1, "", 0)))> / %<(SLibCG_SE(SLibCGIR_PV(33, 0, 1, 1, "", -1, "", 0)))>);
/* End of Outputs for SubSystem: '<Root>/VITM' */

/* Outport: '<Root>/vitm_CellsTemperatureFiltered' incorporates:
 *  Outport: '<Root>/vitm_CellsVoltageFiltered'
 */
memcpy(&((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 20))[0], &rtb_Add1_h[0], 40U * sizeof(real_T));
/* Outport: '<Root>/vitm_CellsVoltageFiltered' incorporates:
 *  Outport: '<Root>/vitm_CellsTemperatureFiltered'
 */
memcpy(&((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 21))[0], &_rtB->Add_n[0], 40U * sizeof(real_T));
/* Outport: '<Root>/vitm_VehSideVoltageFiltered' */
((real_T *)ssGetOutputPortSignal(%<tSimStruct>, 22))[0] = rtb_Add;
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 1, 0)>
%endif
%if SLibCG_ArgAccessed(0, 1, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(0, 1, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%<comma>%<tSimStructType> *%<tSimStruct>\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
