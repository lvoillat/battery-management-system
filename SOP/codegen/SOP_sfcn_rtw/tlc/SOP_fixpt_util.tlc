%function CGIRBlockRegisterFixPointFunctions() void
%if !ISFIELD(FixPtUtils,"SOP_look2_binlx")
%assign tmpRet = SETFIELD(FixPtUtils,"SOP_look2_binlx",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real_T SOP_look2_binlx(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real_T SOP_look2_binlx(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride)
{
    real_T frac;
    uint32_T bpIndices[2];
    real_T fractions[2];
    real_T yL_1d;
    uint32_T iRght;
    uint32_T bpIdx;
    uint32_T iLeft;
    /* Lookup 2-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear'
   Extrapolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
    } else if (u0 < bp0[maxIndex[0U]]) {
        /* Binary Search */
        bpIdx = maxIndex[0U] >> 1U;
        iLeft = 0U;
        iRght = maxIndex[0U];
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex[0U] - 1U;
        frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U] - 1U]);
    }
    fractions[0U] = frac;
    bpIndices[0U] = iLeft;
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u1 <= bp1[0U]) {
        iLeft = 0U;
        frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
    } else if (u1 < bp1[maxIndex[1U]]) {
        /* Binary Search */
        bpIdx = maxIndex[1U] >> 1U;
        iLeft = 0U;
        iRght = maxIndex[1U];
        while (iRght - iLeft > 1U) {
            if (u1 < bp1[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
    } else {
        iLeft = maxIndex[1U] - 1U;
        frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U] - 1U]);
    }
    /* Interpolation 2-D
   Interpolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'wrapping'
 */
    bpIdx = iLeft * stride + bpIndices[0U];
    yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
    bpIdx += stride;
    return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) - yL_1d) * frac + yL_1d;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("SOP_look2_binlx",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("SOP_look2_binlx", "MemSecFuncExecute", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("SOP_look2_binlx", "MemSecFuncExecute", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"SOP_look2_binlx")


%if !ISFIELD(FixPtUtils,"SOP_look1_binlx")
%assign tmpRet = SETFIELD(FixPtUtils,"SOP_look1_binlx",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real_T SOP_look1_binlx(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real_T SOP_look1_binlx(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
    real_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear'
   Extrapolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex - 1U;
        frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
    }
    /* Interpolation 1-D
   Interpolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'wrapping'
 */
    return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("SOP_look1_binlx",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("SOP_look1_binlx", "MemSecFuncExecute", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("SOP_look1_binlx", "MemSecFuncExecute", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"SOP_look1_binlx")


%endfunction


